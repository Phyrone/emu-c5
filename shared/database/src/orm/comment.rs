//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "comment"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub origin: Option<Json>,
    pub author_id: i64,
    pub post_id: i64,
    pub parent_id: Option<i64>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub deleted_at: Option<DateTime>,
    pub payload: Json,
    pub metadata: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Origin,
    AuthorId,
    PostId,
    ParentId,
    CreatedAt,
    UpdatedAt,
    DeletedAt,
    Payload,
    Metadata,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    SelfRef,
    Post,
    Profile,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::Origin => ColumnType::JsonBinary.def().null(),
            Self::AuthorId => ColumnType::BigInteger.def(),
            Self::PostId => ColumnType::BigInteger.def(),
            Self::ParentId => ColumnType::BigInteger.def().null(),
            Self::CreatedAt => ColumnType::DateTime.def(),
            Self::UpdatedAt => ColumnType::DateTime.def(),
            Self::DeletedAt => ColumnType::DateTime.def().null(),
            Self::Payload => ColumnType::JsonBinary.def(),
            Self::Metadata => ColumnType::JsonBinary.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::SelfRef => Entity::belongs_to(Entity)
                .from(Column::ParentId)
                .to(Column::Id)
                .into(),
            Self::Post => Entity::belongs_to(super::post::Entity)
                .from(Column::PostId)
                .to(super::post::Column::Id)
                .into(),
            Self::Profile => Entity::belongs_to(super::profile::Entity)
                .from(Column::AuthorId)
                .to(super::profile::Column::Id)
                .into(),
        }
    }
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl Related<super::profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Profile.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "Entity", def = "Relation::SelfRef.def()")]
    SelfRef,
    #[sea_orm(entity = "super::post::Entity")]
    Post,
    #[sea_orm(entity = "super::profile::Entity")]
    Profile,
    #[sea_orm(entity = "Entity", def = "Relation::SelfRef.def().rev()")]
    SelfRefReverse,
}
