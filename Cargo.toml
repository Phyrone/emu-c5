[workspace]
resolver = "2"
members = [
    # Shared
    "shared/database",
    "shared/database/migration",
    "shared/grpc",
    "shared/build",
    # Services
    "services/auth",
    "services/snowflake",
    # Other
    "dev-utils"
]

[workspace.package]
version = "0.0.1-dev"
edition = "2024"
publish = false
authors = ["Samuel Laqua (Phyrone) <phyrone@phyrone.de>"]
license = "EUPL-1.2"
homepage = "www.phyrone.de"
readme = "README.md"

[workspace.dependencies]
emu-shared-database-migration = { path = "shared/database/migration" }
emu-shared-grpc = { path = "shared/grpc" }

# Core
chrono = { version = "0.4", features = ["default", "serde", "now"] }
tempfile = { version = "3.20", features = ["getrandom"] }
url = { version = "2.5.4", features = ["serde"] }
rand = { version = "0.9", features = ["std"] }
fastrand = { version = "2.3", features = ["std"] }
uuid = { version = "1.17", features = ["v4", "rng-rand", "serde"] }
semver = { version = "1.0", features = ["std", "serde"] }

# Utils
hexafreeze = { version = "0.5" }
postgresql_embedded = { version = "0.18", features = ["indicatif"] }
dotenvy = { version = "0.15", features = ["clap"] }
clap = { version = "4.5", features = ["env", "cargo", "derive", "string", "unicode"] }
clap-num = { version = "1.2" }
clap-verbosity-flag = { version = "3.0", features = ["tracing", "log"] }
argon2 = { version = "0.5.3", features = ["std", "simple"] }
webauthn-rs = { version = "0.5.1", features = ["conditional-ui", "danger-allow-state-serialisation", "resident-key-support", "workaround-google-passkey-specific-issues"] }


# Async, Network, IO and Concurrency
tokio = { version = "1.44", features = ["full", "mio", "tracing"] }
futures-lite = { version = "2.6", features = [] }

# Protobuf
prost = { version = "0.13", features = ["prost-derive"] }
tonic = { version = "0.13", features = ["zstd", "gzip", "deflate", "tls-ring"] }
tonic-build = { version = "0.13", features = [] }

# Database
sea-orm = { version = "1.1", features = [
    # Runtime
    "runtime-tokio", "runtime-tokio-rustls",
    # Database
    "sqlx-all",
    # Types
    "with-uuid", "with-json", "serde_json", "with-chrono",
] }
sea-orm-migration = { version = "1.1", features = [
    # Runtime
    "runtime-tokio", "runtime-tokio-rustls",
    # Database
    "sqlx-sqlite", "sqlx-postgres", "sqlx-mysql",
    # Types
    "with-uuid", "with-json", "with-chrono"
] }
sea-schema = { version = "0.16", features = ["log", "runtime-tokio", "sqlx-all", "with-serde"] }
sea-orm-codegen = { version = "1.1" }
sqlx = { version = "0.8", features = ["all-databases", "uuid", "regexp", "runtime-tokio", "chrono", "bit-vec", "runtime-tokio-rustls"] }
seaography = { version = "1.1", features = [
    "with-chrono", "with-json", "with-uuid", "with-postgres-array"
] }
redis = { version = "0.31.0", features = ["cluster", "cluster-async", "r2d2", "tokio-comp"] }

# Error Handling
error-stack = { version = "0.5", features = ["serde"] }
thiserror = "2.0"

# Serde
serde = { version = "1.0", features = ["alloc", "derive", "rc"] }
serde_json = { version = "1.0", features = ["std", "indexmap", "preserve_order"] }
rmp = { version = "0.8", features = ["std"] }
rmp-serde = { version = "1.3" }
schemars = { version = "1.0.0-alpha.20", features = ["url2", "uuid1", "semver1", "bytes1", "derive", "preserve_order"] }
quick-xml = { version = "0.37", features = ["serde", "async-tokio", "escape-html", "encoding_rs", "overlapped-lists"] }


# Logging and Tracing
sentry = { version = "0.38", features = ["anyhow", "log", "tower", "tracing"] }
tracing = { version = "0.1", features = ["log"] }
pretty_env_logger = { version = "0.5" }



[profile.dev]
incremental = true

[profile.release]
opt-level = 3
codegen-units = 1
lto = "fat"
