//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "profile"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub origin: Option<Json>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub deleted_at: Option<DateTime>,
    pub user_id: i64,
    pub name: String,
    pub profile_picture: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Origin,
    CreatedAt,
    UpdatedAt,
    DeletedAt,
    UserId,
    Name,
    ProfilePicture,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Comment,
    Guild,
    GuildMember,
    Message,
    Post,
    User,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::Origin => ColumnType::JsonBinary.def().null(),
            Self::CreatedAt => ColumnType::DateTime.def(),
            Self::UpdatedAt => ColumnType::DateTime.def(),
            Self::DeletedAt => ColumnType::DateTime.def().null(),
            Self::UserId => ColumnType::BigInteger.def(),
            Self::Name => ColumnType::String(StringLen::None).def(),
            Self::ProfilePicture => ColumnType::BigInteger.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Comment => Entity::has_many(super::comment::Entity).into(),
            Self::Guild => Entity::has_many(super::guild::Entity).into(),
            Self::GuildMember => Entity::has_many(super::guild_member::Entity).into(),
            Self::Message => Entity::has_many(super::message::Entity).into(),
            Self::Post => Entity::has_many(super::post::Entity).into(),
            Self::User => Entity::has_one(super::user::Entity).into(),
        }
    }
}

impl Related<super::comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comment.def()
    }
}

impl Related<super::guild::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guild.def()
    }
}

impl Related<super::guild_member::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GuildMember.def()
    }
}

impl Related<super::message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Message.def()
    }
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::comment::Entity")]
    Comment,
    #[sea_orm(entity = "super::guild::Entity")]
    Guild,
    #[sea_orm(entity = "super::guild_member::Entity")]
    GuildMember,
    #[sea_orm(entity = "super::message::Entity")]
    Message,
    #[sea_orm(entity = "super::post::Entity")]
    Post,
    #[sea_orm(entity = "super::user::Entity")]
    User,
}
