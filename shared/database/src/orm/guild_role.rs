//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "guild_role"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub origin: Option<Json>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub deleted_at: Option<DateTime>,
    pub guild_id: i64,
    pub name: String,
    pub color: Option<String>,
    pub privileges: Json,
    pub configuration: Json,
    pub is_default: bool,
    pub position: i16,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Origin,
    CreatedAt,
    UpdatedAt,
    DeletedAt,
    GuildId,
    Name,
    Color,
    Privileges,
    Configuration,
    IsDefault,
    Position,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Guild,
    GuildMember,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::Origin => ColumnType::JsonBinary.def().null(),
            Self::CreatedAt => ColumnType::DateTime.def(),
            Self::UpdatedAt => ColumnType::DateTime.def(),
            Self::DeletedAt => ColumnType::DateTime.def().null(),
            Self::GuildId => ColumnType::BigInteger.def(),
            Self::Name => ColumnType::String(StringLen::None).def(),
            Self::Color => ColumnType::String(StringLen::None).def().null(),
            Self::Privileges => ColumnType::JsonBinary.def(),
            Self::Configuration => ColumnType::JsonBinary.def(),
            Self::IsDefault => ColumnType::Boolean.def(),
            Self::Position => ColumnType::SmallInteger.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Guild => Entity::belongs_to(super::guild::Entity)
                .from(Column::GuildId)
                .to(super::guild::Column::Id)
                .into(),
            Self::GuildMember => Entity::has_many(super::guild_member::Entity).into(),
        }
    }
}

impl Related<super::guild::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guild.def()
    }
}

impl Related<super::guild_member::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GuildMember.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::guild::Entity")]
    Guild,
    #[sea_orm(entity = "super::guild_member::Entity")]
    GuildMember,
}
