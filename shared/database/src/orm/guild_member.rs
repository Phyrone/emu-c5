//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "guild_member"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub guild_id: i64,
    pub member_id: i64,
    pub joined_at: DateTime,
    pub role_id: Option<i64>,
    pub privileges: Json,
    pub profile_overwrites: Option<Json>,
    pub configuration: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    GuildId,
    MemberId,
    JoinedAt,
    RoleId,
    Privileges,
    ProfileOverwrites,
    Configuration,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    GuildId,
    MemberId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (i64, i64);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Guild,
    GuildRole,
    Profile,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::GuildId => ColumnType::BigInteger.def(),
            Self::MemberId => ColumnType::BigInteger.def(),
            Self::JoinedAt => ColumnType::DateTime.def(),
            Self::RoleId => ColumnType::BigInteger.def().null(),
            Self::Privileges => ColumnType::JsonBinary.def(),
            Self::ProfileOverwrites => ColumnType::JsonBinary.def().null(),
            Self::Configuration => ColumnType::JsonBinary.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Guild => Entity::belongs_to(super::guild::Entity)
                .from(Column::GuildId)
                .to(super::guild::Column::Id)
                .into(),
            Self::GuildRole => Entity::belongs_to(super::guild_role::Entity)
                .from(Column::RoleId)
                .to(super::guild_role::Column::Id)
                .into(),
            Self::Profile => Entity::belongs_to(super::profile::Entity)
                .from(Column::MemberId)
                .to(super::profile::Column::Id)
                .into(),
        }
    }
}

impl Related<super::guild::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guild.def()
    }
}

impl Related<super::guild_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GuildRole.def()
    }
}

impl Related<super::profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Profile.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::guild::Entity")]
    Guild,
    #[sea_orm(entity = "super::guild_role::Entity")]
    GuildRole,
    #[sea_orm(entity = "super::profile::Entity")]
    Profile,
}
